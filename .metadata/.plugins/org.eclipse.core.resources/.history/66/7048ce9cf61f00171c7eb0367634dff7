package cloudera;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Account {

	private int balance;
	private String name;
	private Lock lock;
	private Condition hasBalanceCondition;
	public Account(String n) {
		name = n;
		balance = 0;
		lock = new ReentrantLock();
		hasBalanceCondition = lock.newCondition();
	}
	
	// remember to unlock before return or else there would
	// be threads hang up.
	public void deposit(int amount) {
		lock.lock();
		try {
			balance += amount;
			if (balance > 1000000) {
				System.out.println("Hi " + name + ", Your balance cannot be over 1000000");
				balance -= amount;
				lock.unlock();
				return;
			}
		} finally {
			lock.unlock();
		}
	}
	
	public void withdraw(int amount) {
		lock.lock();
		try {
			balance -= amount;
//			if (balance < 0) {
//				System.out.println("Hi " + name + ", Your balnace is not enough.");
//				balance += amount;
//				lock.unlock();
//				return;
//			}
			lock.unlock();
		} finally {
			lock.unlock();
		}
		
	}
	
	public void transfer(Account acc, int amount) {
		this.withdraw(amount);
		acc.deposit(amount);
	}
	
	public int getBalance() {
		return balance;
	}
	public String getName() {
		return name;
	}

}

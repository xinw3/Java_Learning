package purestorage;
/*
 *  pure storage buddy system bitmap
    Given a complete binary tree with nodes of values of either 1 or 0, the following rules always hold:
    (1) a node's value is 1 if and only if all its subtree nodes' values are 1
    (2) a leaf node can have value either 1 or 0
    Implement the following 2 APIs:
    set_bit(offset, length), set the bits at range from offset to offset+length-1
    clear_bit(offset, length), clear the bits at range from offset to offset+length-1
    
    i.e. The tree is like:
                 0
              /     \
             0        1
           /  \      /  \
          1    0    1    1
         /\   / \   / 
        1  1 1   0 1
        Since it's complete binary tree, the nodes can be stored in an array:
        [0,0,1,1,0,1,1,1,1,1,0,1] 
 */
public class BitMap {
	
	public void set_bit(int[] arr, int offset, int length) {
		if (arr.length == 0 || offset < 0 || length <= 0) {
			return;
		}
		
		int n = arr.length;
		for (int i = offset; i < n && i < offset +length; i++) {
			// the the bit is already 1, continue;
			if (arr[i] == 1) {
				continue;
			}
			arr[i] = 1;
			
			// set descendants
			set_bit_down(arr, i, n - 1);
			
		}
		
	}
	
	public void set_bit_down(int[] arr, int offset, int length) {
		
	}
	
	public void clear_bit(int arr, int offset, int length) {
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
